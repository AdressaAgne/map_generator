<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{project_name}} - Documentation</title>
    <link rel="stylesheet" href="../css/main.css">
</head>

<body>
    <main>
        <nav>
            Gulp
            Scss
            Javascript
            server / deploy
        </nav>

        <section>
            <h2>Project settings</h2>

            <p>Distribution code folder: <strong>{{dist}}</strong></p>
            <p>Production testing folder: <strong>{{prod}}</strong></p>
            <p>Source Code folder: <strong>{{source}}</strong></p>
            <p>Deployment to <strong>{{server.username}}@{{server.host}}:{{server.port}}</strong> with mode
                {{server.mode}} at location <strong>{{server.base}}/{{project_name}}</strong></p>


        </section>

        <article id="main-article">
            <h2>Watch</h2>
            <ul>
                <li data-speed="0.45">$ gulp watch:css - Watch html and css</li>
                <li data-speed="0.5">$ gulp watch:js - Watch html and js</li>
                <li data-speed="0.1">$ gulp watch - Watch html, css and js</li>
                <li data-speed="-1">$ gulp - Watch html, css and js</li>
            </ul>

            <h2>Build</h2>
            <ul>
                <li>$ gulp build - Build Custome</li>
                <li>$ gulp build:inline - Build HTML vedlegg</li>
            </ul>

            <h2>Scss <small>enviorment variables</small></h2>
            <ul>
                <li>env(url) - String: asset url '' in prod, 'https://spesial...' in dist</li>
                <li>env(debug) - Boolean: prod / dist</li>
                <li>env(task) - Enum: watch | build | build:inline</li>
            </ul>


            <h2>AwesomeSauce3 Features</h2>
            <h3>Components</h3>
            <ul>
                <li>Stored in ${source}/components/&lt;component_name&gt;</li>
                <li>Add index.html and/or index.js</li>
                <li>Javascript files will be included in app.js</li>
                <li>In a component you can add Components and Includes.</li>
            </ul>
            <div class="language-html">
                <pre><span class="p">&lt;</span><span class="nt">component</span> name="{component_name}"<span class="p">&gt;</span><span class="p">&lt;</span>/<span class="nt">component</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">component</span> name="{component_name}" /<span class="p">&gt;</span></pre>
            </div>

            <h3>Includes</h3>

            <ul>
                <li>Includes is not recursive. So you can not add other includes or components.</li>
            </ul>
            <div class="language-html">
                <pre><span class="p">&lt;</span><span class="nt">include</span> name="{filename}"<span class="p">&gt;</span><span class="p">&lt;</span>/<span class="nt">include</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">include</span> name="{filename}" /<span class="p">&gt;</span></pre>
            </div>


            <h1>Docs - Javascript</h1>
            <h2>Viewport css vars</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Viewport'</span><span class="p">);</span>
</pre>
            </div>


            <p>output:</p>
            <div class="codehilite language-html">
                <pre><span></span><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">"en"</span> <span class="na">style</span><span class="o">=</span><span class="s">"--vph:1035px; --vpw:1058px; --vphu:1035; --vpwu:1058;"</span><span class="p">&gt;&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</pre>
            </div>


            <h2 id="markdown-header-fullscreen">Fullscreen</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Fullscreen</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Fullscreen'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * element: HTMLElement, default body tag</span>
<span class="cm"> * Go intro fullscreen mode</span>
<span class="cm"> */</span>
<span class="nx">Fullscreen</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>

<span class="c1">// Exit fullscreen mode</span>
<span class="nx">Fullscreen</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>

<span class="c1">// Toggle between start and exit</span>
<span class="nx">Fullscreen</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>

<span class="c1">// Check if you are in fullscreen mode</span>
<span class="nx">Fullscrenn</span><span class="p">.</span><span class="nx">isFullScreen</span><span class="p">()</span>
</pre>
            </div>


            <h2 id="markdown-header-debounce">Debounce</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">debounce</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/debounce'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * callback: Function</span>
<span class="cm"> * wait: Number, mm to wait</span>
<span class="cm"> * immediate, Boolean, default false</span>
<span class="cm"> */</span>
<span class="nx">debounce</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">wait</span><span class="p">,</span> <span class="nx">immediate</span><span class="p">)</span>
</pre>
            </div>


            <h2 id="markdown-header-parallax">Parallax</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Parallax</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Parallax'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * node: HTMLElement</span>
<span class="cm"> * factor: Number, default 1</span>
<span class="cm"> * callback: Function, deafult </span>
<span class="cm"> * add element to parallax</span>
<span class="cm"> */</span>
<span class="nx">Parallax</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">factor</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>

<span class="c1">// Start the parallax loop, not necessary if you have not called stop().</span>
<span class="nx">Parallax</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>

<span class="c1">// Stop the parallax loop</span>
<span class="nx">Parallax</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
</pre>
            </div>


            <h2 id="markdown-header-ajax-fetching-files">Ajax &amp; Fetching files</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/fs'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="c1">// aSync</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'url.domain/data.json'</span><span class="p">,</span> <span class="nx">response</span> <span class="p">=&gt;</span> <span class="p">{</span>

<span class="p">});</span>

<span class="c1">// sync</span>
<span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">'url.domain/data.json'</span><span class="p">);</span>
</pre>
            </div>


            <h2 id="markdown-header-urls-and-paths">URl's and Paths</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="c1">// Get the path separator</span>
<span class="nx">path</span><span class="p">.</span><span class="nx">sep</span> <span class="o">=</span> <span class="s1">'/'</span><span class="p">;</span>
<span class="nx">path</span><span class="p">.</span><span class="nx">delimiter</span> <span class="o">=</span> <span class="s1">':'</span><span class="p">;</span>

<span class="c1">// Normaliza a path</span>
<span class="nx">path</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(</span><span class="s1">'/data/../images/'</span><span class="p">);</span>
<span class="c1">// Output: images/</span>

<span class="c1">//Join paths</span>
<span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span><span class="s1">'gfx'</span><span class="p">)</span>
<span class="c1">// data/gfx</span>

<span class="c1">// Split</span>
<span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">sep</span><span class="p">);</span>


<span class="nx">path</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="s1">'/data/123.jpg'</span><span class="p">);</span>
<span class="c1">// 123.jpg</span>

<span class="nx">path</span><span class="p">.</span><span class="nx">relative</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
</pre>
            </div>


            <h2 id="markdown-header-measure-text">Measure Text</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">ruler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Ruler'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * node: HTMLElement</span>
<span class="cm"> * Measure the width of text in a node</span>
<span class="cm"> */</span>
<span class="kd">let</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">ruler</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</pre>
            </div>


            <h2 id="markdown-header-scroll-by-dragging">Scroll By Dragging</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">DragScroll</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/plugins/DragScroll'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * node: HTMLElement</span>
<span class="cm"> * options: Object</span>
<span class="cm"> *      top: Boolean, scroll vertical</span>
<span class="cm"> *      left: Boolean, scroll horizontal</span>
<span class="cm"> */</span>
<span class="kd">let</span> <span class="nx">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DragScroll</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span><span class="nx">top</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">left</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</pre>
            </div>


            <h2 id="markdown-header-event">Event</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Event</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/events/Event'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">class</span> <span class="nx">example</span> <span class="kr">extends</span> <span class="nx">Event</span> <span class="p">{</span>

    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">'load'</span><span class="p">,</span> <span class="s1">'hei'</span><span class="p">);</span>
        <span class="c1">//code</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kd">let</span> <span class="nx">ex</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">example</span><span class="p">();</span>

<span class="nx">ex</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'load'</span><span class="p">,</span> <span class="nx">e</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// e = 'hei'</span>
<span class="p">});</span>
</pre>
            </div>


            <h2 id="markdown-header-keyhandler">KeyHandler</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">KeyHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/events/KeyHandler'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">keyListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyHandler</span><span class="p">();</span>

<span class="nx">keyListener</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'f'</span><span class="p">,</span> <span class="nx">e</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// User press f, do somehting</span>
<span class="p">});</span>
</pre>
            </div>


            <p>KeyEvents:
                * A-Z
                * 0-9
                * F1-F24
                * CANCEL
                * HELP
                * BACK_SPACE
                * TAB
                * CLEAR
                * ENTER
                * ENTER_SPECIAL
                * SHIFT
                * CONTROL
                * ALT
                * PAUSE
                * CAPS_LOCK
                * KANA
                * EISU
                * JUNJA
                * FINAL
                * HANJA
                * ESCAPE
                * CONVERT
                * NONCONVERT
                * ACCEPT
                * MODECHANGE
                * SPACE
                * PAGE_UP
                * PAGE_DOWN
                * END
                * HOME
                * LEFT
                * UP
                * RIGHT
                * DOWN
                * SELECT
                * PRINT
                * EXECUTE
                * PRINTSCREEN
                * INSERT
                * DELETE
                * COLON
                * SEMICOLON
                * LESS_THAN
                * EQUALS
                * GREATER_THAN
                * QUESTION_MARK
                * AT
                * OS_KEY
                * CONTEXT_MENU
                * SLEEP
                * NUMPAD0 - NUMPAD0
                * MULTIPLY
                * ADD
                * SEPARATOR
                * SUBTRACT
                * DECIMAL
                * DIVIDE
                * NUM_LOCK
                * SCROLL_LOCK
                * WIN_OEM_FJ_JISHO
                * WIN_OEM_FJ_MASSHOU
                * WIN_OEM_FJ_TOUROKU
                * WIN_OEM_FJ_LOYA
                * WIN_OEM_FJ_ROYA
                * CIRCUMFLEX
                * EXCLAMATION
                * DOUBLE_QUOTE
                * HASH
                * DOLLAR
                * PERCENT
                * AMPERSAND
                * UNDERSCORE
                * OPEN_PAREN
                * CLOSE_PAREN
                * ASTERISK
                * PLUS
                * PIPE
                * HYPHEN_MINUS
                * OPEN_CURLY_BRACKET
                * CLOSE_CURLY_BRACKET
                * TILDE
                * VOLUME_MUTE
                * VOLUME_DOWN
                * VOLUME_UP
                * SEMICOLON
                * EQUALS
                * COMMA
                * MINUS
                * PERIOD
                * SLASH
                * BACK_QUOTE</p>
            <h2 id="markdown-header-motion">Motion</h2>
            <p>Mainly for mobile</p>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Motion</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/events/Motion'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kd">let</span> <span class="nx">motion</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Motion</span><span class="p">();</span>

<span class="nx">motion</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">e</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">});</span>
</pre>
            </div>


            <div class="codehilite language-js">
                <pre><span></span><span class="nx">e</span><span class="p">.</span><span class="nx">alpha</span> <span class="c1">// 0-360deg</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">beta</span> <span class="c1">// 0-360deg</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">gamma</span> <span class="c1">// 0-360deg</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">type</span> <span class="c1">// deviceorientation | MozOrientation | devicemotion</span>
</pre>
            </div>


            <p>Motion Events:
                * motion
                * portrait
                * portrait_inverse
                * landscape_left
                * landscape_right
                * display_up
                * display_down</p>
            <h2 id="markdown-header-orientation">Orientation</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Orientation</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/events/Orientation'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">orientation</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Orientation</span><span class="p">();</span>

<span class="nx">orientation</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">e</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">});</span>
</pre>
            </div>


            <div class="codehilite language-js">
                <pre><span></span><span class="kr">class</span> <span class="nx">example</span> <span class="kr">extends</span> <span class="nx">Orientation</span> <span class="p">{</span>

    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">e</span> <span class="p">=&gt;</span> <span class="p">{</span>

        <span class="p">});</span>
    <span class="p">}</span>

<span class="p">}</span>
</pre>
            </div>


            <div class="codehilite language-js">
                <pre><span></span><span class="nx">e</span><span class="p">.</span><span class="nx">orientation</span> <span class="c1">// portrait | landscape</span>
</pre>
            </div>


            <p>Orientation Events:
                <em> change
                </em> portrait
                * landscape</p>
            <h2 id="markdown-header-viewportchecker">ViewportChecker</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">ViewportChecker</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/events/ViewportChecker'</span><span class="p">);</span>
</pre>
            </div>


            <p>Useage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * node: HTMLElement</span>
<span class="cm"> */</span>
<span class="nx">ViewportChecker</span><span class="p">.</span><span class="nx">isInViewport</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</pre>
            </div>


            <div class="codehilite language-js">
                <pre><span></span><span class="kd">let</span> <span class="nx">vp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ViewportChecker</span><span class="p">();</span>

<span class="cm">/**</span>
<span class="cm"> * node: HTMLElement</span>
<span class="cm"> * callback: Functions</span>
<span class="cm"> * offset: String|Number '20%', 300</span>
<span class="cm"> * options: Object</span>
<span class="cm"> *  reverseOffset: Boolean, deafult false</span>
<span class="cm"> *  repeat: Boolean, deafult true</span>
<span class="cm"> *  </span>
<span class="cm"> */</span>
<span class="nx">vp</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">},</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</pre>
            </div>


            <p>e values</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="nx">e</span><span class="p">.</span><span class="nx">action</span> <span class="c1">// add || remove</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">direction</span> <span class="c1">// up || down</span>
</pre>
            </div>


            <h2 id="markdown-header-latlng">LatLng</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">LatLg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/geo/LatLng'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kd">let</span> <span class="nx">position</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat1</span><span class="p">,</span> <span class="nx">lng1</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">position2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat2</span><span class="p">,</span> <span class="nx">lng2</span><span class="p">);</span>


<span class="kd">let</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">position2</span><span class="p">);</span>
<span class="c1">// distance in meter</span>
</pre>
            </div>


            <h2 id="markdown-header-easing">Easing</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="p">{</span><span class="nx">quintInOut</span><span class="p">,</span> <span class="nx">linear</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Easing'</span><span class="p">);</span>
</pre>
            </div>


            <p>or</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">Easing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/functions/Easing'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">quintInOut</span> <span class="o">=</span> <span class="nx">Easing</span><span class="p">.</span><span class="nx">quintInOut</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">linear</span> <span class="o">=</span> <span class="nx">Easing</span><span class="p">.</span><span class="nx">linear</span><span class="p">;</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kd">let</span> <span class="nx">time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">begin</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">end</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">change</span> <span class="o">=</span> <span class="nx">end</span> <span class="o">-</span> <span class="nx">begun</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">duration</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// in steps from 0 to 100, change from 10 to 20;</span>
<span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">quintInOut</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">begin</span><span class="p">,</span> <span class="nx">change</span><span class="p">,</span> <span class="nx">duration</span><span class="p">);</span>
</pre>
            </div>


            <h2 id="markdown-header-prototype">Prototype</h2>
            <p>Import:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="kr">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./libs/plugins/proto'</span><span class="p">);</span>
</pre>
            </div>


            <p>Usage:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="cm">/**</span>
<span class="cm"> * selector: String CSS Selector</span>
<span class="cm"> */</span>
<span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">query</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
</pre>
            </div>


            <p>Query Methods:</p>
            <div class="codehilite language-js">
                <pre><span></span><span class="nx">elements</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">});</span>

<span class="c1">// Filter elements</span>
<span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
    <span class="k">return</span> <span class="nb">Boolean</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Remap the element values</span>
<span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
    <span class="k">return</span> <span class="nx">Any</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Sort items</span>
<span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// code</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">any</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">any</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// indexOf</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>

<span class="c1">// Reverse the list order</span>
<span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span>

<span class="c1">//Get HTMLElement</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">item</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>

<span class="c1">// get first item</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">first</span><span class="p">();</span>

<span class="c1">// Get last item</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">last</span><span class="p">();</span>

<span class="c1">// Get the parent of the first element</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">parent</span><span class="p">()</span>

<span class="c1">// Get elements with an odd index</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">odd</span><span class="p">()</span>

<span class="c1">// Get elements with an even index</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">even</span><span class="p">()</span>

<span class="c1">// Get elements with an nth index</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">nth</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>

<span class="c1">// Get elements thats not in the selector</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>


<span class="c1">// Add class</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="kr">class</span><span class="p">);</span>

<span class="c1">// Remove class</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="kr">class</span><span class="p">);</span>

<span class="c1">// Toggle between classes</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="kr">class</span><span class="p">);</span>

<span class="c1">// Delete / Remove the element</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>

<span class="c1">// Set an attribute</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>

<span class="c1">// Remove an attribute</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>

<span class="c1">// Get an attribute</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>


<span class="c1">// addEventListeners</span>
<span class="cm">/**</span>
<span class="cm"> * Events: String, space sep ex; 'click hover'</span>
<span class="cm"> * callback: Function</span>
<span class="cm"> */</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span>


<span class="c1">// Styling</span>
<span class="cm">/**</span>
<span class="cm"> * key: String, 'background-color'</span>
<span class="cm"> * value: String, 'red'</span>
<span class="cm"> */</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>

<span class="c1">// Rainbow effect</span>
<span class="cm">/**</span>
<span class="cm"> * random Boolean, default false</span>
<span class="cm"> * colors String </span>
<span class="cm"> */</span>
<span class="nx">elements</span><span class="p">.</span><span class="nx">rainbow</span><span class="p">(</span><span class="nx">random</span><span class="p">,</span> <span class="nx">colors</span><span class="p">...)</span>
</pre>
            </div>
        </article>
    </main>
</body>

</html>